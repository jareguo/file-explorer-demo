var events = require('events');
var path = require('path');
var fs = require('fs');
var util = require('util');
var mime = require('mime');
if (process.platform == 'win32') {
    var win32 = require("win32");
}

function extendJstree(jstree) {
    jstree.find_node = function (parentNode, text) {
        var children = parentNode.children;
        if (children) {
            for (var i = 0; i < children.length; ++i) {
                var child = jstree.get_node(children[i]);
                if (child.text == text) {
                    return child;
                }
            }
        }
        return null;
    }
}

function Tree(jquery_element) {
    events.EventEmitter.call(this);
    this.element = jquery_element;

    // init jstree

    jquery_element.jstree({                     // create instance
        'core' : {
            'check_callback' : true,            // always allows modify the structure of the tree
            'error' : console.error,
            'themes' : {
                'dots' : false,
                'responsive' : false,
            }
        }
    });
    this.jstree = jquery_element.jstree(true);  // get the existing instance after create
    
    // register events

    var self = this;
    jquery_element.on('changed.jstree', function (e, data) {
        if (data.action == 'select_node' && data.node) {
            var nodePath = data.node.data;
            if (win32 && nodePath == win32.MY_COMPUTER_PATH) {
                self.emit('select drive');
            }
            else {
                self.emit('navigate', nodePath);
            }
        }
    });

    extendJstree(this.jstree);
}
util.inherits(Tree, events.EventEmitter);

Tree.prototype.navigate = function (dir) {
    var pathes = global.getPathData(dir);
    var parsingNode = this.jstree.get_node(this.element);
    for (var i = 0; i < pathes.length; ++i) {
        // find sub node
        var nodeName = pathes[i].name;
        var nodePath = pathes[i].path;
        var node = this.jstree.find_node(parsingNode, nodeName);
        if (node) {
            // exists, open it
            parsingNode = node;
            if (node.children && node.children.length > 0) {
                this.jstree.open_node(node, null, false);
                continue;   // no need to create children
            }
        }
        else {
            // create it
            parsingNode = this.jstree.create_node(parsingNode, { text : nodeName, data : nodePath }, "inside");
            parsingNode.path = nodePath;
            if ( ! parsingNode) {
                console.error("failed to create node " + name + " parsingNode: " + parsingNode);
                return;
            };
        }
        // create children
        if (i + 1 < pathes.length) {
            var ignoreNavigateItem = pathes[i + 1].name;
        }
        if (win32 && nodePath == win32.MY_COMPUTER_PATH) {
            this.createDrives(parsingNode, ignoreNavigateItem);
        }
        else {
            this.createFolders(parsingNode, nodePath, ignoreNavigateItem);
        }
    }
    this.jstree.deselect_all(true);
    this.jstree.select_node(parsingNode, true, true);
};

Tree.prototype.createDrives = function (parentNode, ignoreItem) {
    var self = this;
    win32.getDrives(function (drives) {
        for (var i = 0; i < drives.length; ++i) {
            var driveName = drives[i];
            if (driveName != ignoreItem) {
                self.jstree.create_node(parentNode, { text : driveName, data : driveName }, "inside");
            }
        }
        self.jstree.open_node(parentNode, null, false);
    });
}

Tree.prototype.createFolders = function (parentNode, dir, ignoreItem) {
    var self = this;
    dir += path.sep;
    fs.readdir(dir, function (error, itemList) {
        if (error) {
            console.log(error);
            window.alert(error);
            return;
        }
        for (var i = 0; i < itemList.length; ++i) {
            var item = itemList[i];
            if (item != ignoreItem) {
                var path = dir + item;
                try {
                    var stat = fs.statSync(path);
                }
                catch (e) {
                    continue;
                }
                if (stat.isDirectory()) {
                    self.jstree.create_node(parentNode, { text: item, data : path }, "inside");
                }
            }
        }
        self.jstree.open_node(parentNode, null, false);
    });
}

if (win32) {
    Tree.prototype.selectDrive = function () {
        // focus on my computer
        var root = this.jstree.find_node(this.jstree.get_node(this.element), win32.MY_COMPUTER_NAME);
        if (root) {
            this.jstree.deselect_all(true);
            this.jstree.select_node(root, true, true);
        }
    };
}

exports.Tree = Tree;
