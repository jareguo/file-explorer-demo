var events = require('events');
var path = require('path');
var util = require('util');
var mime = require('mime');
if (process.platform == 'win32') {
    var win32 = require("win32");
}

function Tree(jquery_element) {
    events.EventEmitter.call(this);

    jquery_element.jstree({                     // create instance
        'core' : {
            'check_callback' : true,            // always allows modify the structure of the tree
            'error' : console.error,
            'themes' : {
                'dots' : false,
                'responsive' : false,
            }
        }
    });

    this.jstree = jquery_element.jstree(true);  // get the existing instance after create
    this.element = jquery_element;
    var self = this;

    jquery_element.on('select_node.jstree'), function (e, data) {
        if (data.selected) {
            var file_path = data.selected.data('path');
            var type = data.selected.data('type');
            self.emit('navigate', file_path, type);
        }
    }
    //this.jstree.
}
util.inherits(Tree, events.EventEmitter);

Tree.prototype.navigate = function (dir) {
    var pathes = global.getPathData(dir);
    var parsingNode = this.element;
    for (var i = 0; i < pathes.length; ++i) {
        // find sub node
        var id = pathes[i].name.replace(':', '_').replace(' ', '_');
        var name = pathes[i].name;
        var subNode = parsingNode.children("ul").children("#" + id);
        console.log(id);
        console.log(subNode);
        if (subNode && subNode.length > 0) {
            // if exists, open it
            parsingNode = subNode;
            this.jstree.open_node(subNode[0], null, false);
        }
        else {
            // create it
            console.log("create " + name);
            var newNodeId = this.jstree.create_node(parsingNode, { text : name, id : id }, "inside");
            console.log("newNodeId " + newNodeId);
            parsingNode = this.jstree.get_node(newNodeId, true);
            console.log(parsingNode);
        }
        if (! parsingNode) {
            console.error("failed to create node " + name);
            break;
        };
        console.log(parsingNode.id);
    }
    //var root = this.jstree.create_node(this.element, { text : pathes[0].name }, "inside");
    //this.jstree.create_node(root, { text: pathes[0].name }, "inside");
    //var self = this;
};

Tree.prototype.selectDrive = function () {
    // focus on my computer

};

exports.Tree = Tree;
